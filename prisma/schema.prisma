// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model categories {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  products products[]
}

model tables {
  id          Int                @id @default(autoincrement())
  numberTable Int                @unique
  position    Int                @unique
  currentSale salesInRestaurant?
}

model domiciliary {
  id    Int               @id @default(autoincrement())
  name  String
  sales salesInDelivery[]
}

model products {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  price          Int
  costo          Int?
  active         Boolean          @default(true)
  category       categories       @relation(fields: [categoryId], references: [id])
  categoryId     Int
  createdAt      DateTime         @default(now())
  productsInSale productsInSale[]
}

enum saleInDeliveryStatus {
  pending
  sent
  delivered
}

enum saleInRestaurantStatus {
  pending
  paid
}

model sales {
  id                Int                @id @default(autoincrement())
  productsInSale    productsInSale[]
  observations      String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  salesInRestaurant salesInRestaurant?
  salesInDelivery   salesInDelivery?
}

model salesInRestaurant {
  saleId  Int                    @unique
  sale    sales                  @relation(fields: [saleId], references: [id])
  table   tables?                @relation(fields: [tableId], references: [id])
  tableId Int?                   @unique
  status  saleInRestaurantStatus @default(pending)
}

model salesInDelivery {
  saleId        Int                  @unique
  sale          sales                @relation(fields: [saleId], references: [id])
  customer      customers            @relation(fields: [customerId], references: [id])
  customerId    Int
  deliveryPrice Int                  @default(0)
  domiciliary   domiciliary          @relation(fields: [domiciliaryId], references: [id])
  domiciliaryId Int
  status        saleInDeliveryStatus @default(pending)
}

model productsInSale {
  id        Int      @id @default(autoincrement())
  amount    Int
  total     Int
  sale      sales    @relation(fields: [saleId], references: [id])
  saleId    Int
  product   products @relation(fields: [productId], references: [id])
  productId Int
}

model address {
  id             Int          @id @default(autoincrement())
  street         String
  number         String
  neighborhood   neighborhood @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId Int
  customer       customers?
}

model neighborhood {
  id      Int       @id @default(autoincrement())
  name    String
  address address[]
}

model customers {
  id        Int               @id @default(autoincrement())
  name      String
  email     String?
  createdAt DateTime          @default(now())
  phone     String
  address   address           @relation(fields: [addressId], references: [id])
  addressId Int               @unique
  sales     salesInDelivery[]
}
